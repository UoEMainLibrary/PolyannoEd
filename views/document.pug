extends layout

include mixins/_polyanno

block content
  .container
    pre= h.dump(data)

    +polyanno()

    p
      button#savePolyanno.btn.btn-lg.btn-default.center(type='button') Save


block script
  script.
    const data = !{JSON.stringify(data)}
    const vectors = Array.from(JSON.parse(data[0].vectors))
    const annotations = Array.from(JSON.parse(data[0].annotations))
    const transcriptions = Array.from(JSON.parse(data[0].transcriptions))
    const translations = Array.from(JSON.parse(data[0].translations))
    const editors = Array.from(JSON.parse(data[0].editors))
    //- const editors = []
    
    function loadToMap (vectors) {
      vectors.forEach(data => {
        var {coordinates, notFeature: { notGeometry: {notType} }, _id, transcription_fragment, translation_fragment, parent, children, OCD} = data

        var tempGeoJSON = { 'type': 'Feature', 'properties': {}, 'geometry': {} }
        var oldData = tempGeoJSON
        oldData.geometry.type = notType
        oldData.geometry.coordinates = [coordinates]
        oldData.properties.transcription_fragment = transcription_fragment
        oldData.properties.translation_fragment = translation_fragment
        oldData.properties.parent = parent
        oldData.properties.children = children
        oldData.properties.OCD = OCD

        L.geoJson(oldData,
          { style: {
            color: Polyanno.colours.default.vector
          },
            onEachFeature: function (feature, layer) {
              layer._leaflet_id = _id,
                allDrawnItems.addLayer(layer),
                layer.bindPopup(popupVectorMenu)
            }
          }).addTo(polyanno_map)
      })

    }

    function loadToPolyanno (vectors, annotations, transcriptions, translations, editors) {

      console.log(vectors, annotations, transcriptions, translations, editors)

      vectors.forEach( vector => {
        Object.setPrototypeOf(vector, Polyanno.vector.prototype)
        console.log(vector)
        Polyanno.vectors.add(vector)
      })

      annotations.forEach( annotation => {
        Object.setPrototypeOf( annotation, Polyanno.annotation.prototype)
        console.log(annotation)
        Polyanno.annotations.add(annotation)
      })

      transcriptions.forEach( transcription => {
        Object.setPrototypeOf (transcription, Polyanno.transcription.prototype)
        console.log(transcription)
        Polyanno.transcriptions.add(transcription)
      })

      translations.forEach( translation =>{
        Object.setPrototypeOf (translation, Polyanno.translation.prototype)
        console.log(translation)
        Polyanno.transcriptions.add(translation) 
      })

      editors.forEach( editor => {
        Object.setPrototypeOf (editor, Polyanno.editor.prototype)
        console.log(editor)
        Polyanno.transcriptions.add(editor)            
      })

      
    }
    
    function load (vectors, annotations, transcriptions, translations, editors) {
      loadToMap(vectors)
      loadToPolyanno(vectors, annotations, transcriptions, translations, editors)
    }

    $('document').ready( load(vectors, annotations, transcriptions, translations, editors) )